<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan - Captura e DropCopy" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="baseDir_old" elementType="Argument">
            <stringProp name="Argument.name">baseDir_old</stringProp>
            <stringProp name="Argument.value">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AguardaConexaoPor" elementType="Argument">
            <stringProp name="Argument.name">AguardaConexaoPor</stringProp>
            <stringProp name="Argument.value">5000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="senderCompID-cap-primaria" elementType="Argument">
            <stringProp name="Argument.name">senderCompID-cap-primaria</stringProp>
            <stringProp name="Argument.value">SMPISO05</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="targetCompID-cap-primaria" elementType="Argument">
            <stringProp name="Argument.name">targetCompID-cap-primaria</stringProp>
            <stringProp name="Argument.value">C00007210</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dataPregao" elementType="Argument">
            <stringProp name="Argument.name">dataPregao</stringProp>
            <stringProp name="Argument.value">${__time(yyyyMMdd,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="senderCompID-dc" elementType="Argument">
            <stringProp name="Argument.name">senderCompID-dc</stringProp>
            <stringProp name="Argument.value">DCE101C</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="targetCompID-dc" elementType="Argument">
            <stringProp name="Argument.name">targetCompID-dc</stringProp>
            <stringProp name="Argument.value">DBRA5020</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="idInicial" elementType="Argument">
            <stringProp name="Argument.name">idInicial</stringProp>
            <stringProp name="Argument.value">8110</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dataDia" elementType="Argument">
            <stringProp name="Argument.name">dataDia</stringProp>
            <stringProp name="Argument.value">${__time(dd-MM-yyyy,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tradeSessionFix-dc" elementType="Argument">
            <stringProp name="Argument.name">tradeSessionFix-dc</stringProp>
            <stringProp name="Argument.value">DBRA5020</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tradeSessionFix-cap" elementType="Argument">
            <stringProp name="Argument.name">tradeSessionFix-cap</stringProp>
            <stringProp name="Argument.value">C00007210</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="arquivoBmf" elementType="Argument">
            <stringProp name="Argument.name">arquivoBmf</stringProp>
            <stringProp name="Argument.value">plano_bmf_${__time(yyyyMMddHHmmss,)}.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="arquivoBov" elementType="Argument">
            <stringProp name="Argument.name">arquivoBov</stringProp>
            <stringProp name="Argument.value">plano_bov_${__time(yyyyMMddHHmmss,)}.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="baseDir" elementType="Argument">
            <stringProp name="Argument.name">baseDir</stringProp>
            <stringProp name="Argument.value">C:\Eron\Projetos\Safra\CVM35\Fix</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
    </TestPlan>
    <hashTree>
      <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="clordID" enabled="true">
        <stringProp name="CounterConfig.start">${idInicial}</stringProp>
        <stringProp name="CounterConfig.end">1999999999999</stringProp>
        <stringProp name="CounterConfig.incr">1</stringProp>
        <stringProp name="CounterConfig.name">counterClOrdID</stringProp>
        <stringProp name="CounterConfig.format">0000000000000</stringProp>
        <boolProp name="CounterConfig.per_user">false</boolProp>
      </CounterConfig>
      <hashTree/>
      <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="orderId" enabled="true">
        <stringProp name="CounterConfig.start">${idInicial}</stringProp>
        <stringProp name="CounterConfig.end"></stringProp>
        <stringProp name="CounterConfig.incr">1</stringProp>
        <stringProp name="CounterConfig.name">counterOrderId</stringProp>
        <stringProp name="CounterConfig.format">30000000</stringProp>
        <boolProp name="CounterConfig.per_user">false</boolProp>
      </CounterConfig>
      <hashTree/>
      <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="tradeId" enabled="true">
        <stringProp name="CounterConfig.start">${idInicial}</stringProp>
        <stringProp name="CounterConfig.end"></stringProp>
        <stringProp name="CounterConfig.incr">1</stringProp>
        <stringProp name="CounterConfig.name">counterTradeId</stringProp>
        <stringProp name="CounterConfig.format">30000000</stringProp>
        <boolProp name="CounterConfig.per_user">false</boolProp>
      </CounterConfig>
      <hashTree/>
      <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="allocId" enabled="true">
        <stringProp name="CounterConfig.start">${idInicial}</stringProp>
        <stringProp name="CounterConfig.end"></stringProp>
        <stringProp name="CounterConfig.incr">1</stringProp>
        <stringProp name="CounterConfig.name">counterAllocId</stringProp>
        <stringProp name="CounterConfig.format">000000000000</stringProp>
        <boolProp name="CounterConfig.per_user">false</boolProp>
      </CounterConfig>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="CVM_FIX01_01" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1454072305000</longProp>
        <longProp name="ThreadGroup.end_time">1454072305000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV - ControlaThroughput" enabled="true">
          <stringProp name="delimiter">,</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="filename">C:/Eron/Projetos/Safra/CVM35/Fix/throughputBMF.csv</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="variableNames">sleepTimeThroughputInMillis,MensagensPorMinuto</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
        </CSVDataSet>
        <hashTree/>
        <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="AguardaConexaoInicial" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="CVM_FIX01_01.01_ConectaSessao" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">Long sleepTime = Long.valueOf(vars.get(&quot;AguardaConexaoPor&quot;));
log.info(&quot; - sleeping &quot; + sleepTime + &quot; millis... (thread controle vazao, esperando sessoes fix conectarem)&quot;);
Thread.sleep(sleepTime);
log.info(&quot; - liberando thread de controle de vazao&quot;);
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="CVM_FIX01_01.02_ThroughputInicial" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">//log.info(&quot;setando vazao inicial BMF para: &quot;+ vars.get(&quot;MensagensPorMinuto&quot;))
//log.info(&quot;setando vazao inicial Bovespa para: &quot;+ vars.get(&quot;MensagensPorMinutoBov&quot;))
//log.info(&quot;setando vazao inicial BMF para: &quot;+ ${MensagensPorMinuto})
//log.info(&quot;setando vazao inicial BMF para: &quot;+ Long.valueOf(vars.get(&quot;MensagensPorMinuto&quot;))

//props.setProperty(&quot;MensagensPorMinuto&quot;, vars.get(&quot;MensagensPorMinuto&quot;))
//props.setProperty(&quot;MensagensPorMinutoBov&quot;, vars.get(&quot;MensagensPorMinutoBov&quot;))

log.info(&quot;setando vazao inicial BMF para: &quot; + vars.get(&quot;MensagensPorMinuto&quot;));

props.setProperty(&quot;MensagensPorMinuto&quot;, vars.get(&quot;MensagensPorMinuto&quot;));

// props.setProperty(&quot;MensagensPorMinutoBov&quot;, vars.get(&quot;MensagensPorMinutoBov&quot;));
</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Altera vazao com CSV" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">String MensagensPorMinuto = vars.get(&quot;MensagensPorMinuto&quot;);
//String MensagensPorMinutoBov = vars.get(&quot;MensagensPorMinutoBov&quot;);
Long sleepTimeThroughputInMillis = Long.valueOf(vars.get(&quot;sleepTimeThroughputInMillis&quot;));

Long TPM = Long.valueOf(MensagensPorMinuto) / 1;
//Long TPMBov = Long.valueOf(MensagensPorMinutoBov);

//if(Long.valueOf(MensagensPorMinutoBov) != 0){
//	TPMBov = TPMBov / 1;
//	} 

MensagensPorMinuto = String.valueOf(TPM);

props.setProperty(&quot;MensagensPorMinuto&quot;, MensagensPorMinuto);
//props.setProperty(&quot;MensagensPorMinutoBov&quot;, MensagensPorMinutoBov);

log.info(&quot;1 - setando throughput BMF para: &quot; + MensagensPorMinuto + &quot;(simulando minuto, deveria ser &quot; + Long.valueOf(MensagensPorMinuto) / 60 + &quot; por segundo...) - sleeping &quot; + sleepTimeThroughputInMillis + &quot; millis...&quot;);

Thread.sleep(sleepTimeThroughputInMillis);

</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="CVM_FIX01_01.03_AjustaThroughput" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">String MensagensPorMinuto = vars.get(&quot;MensagensPorMinuto&quot;);
//String MensagensPorMinutoBov = vars.get(&quot;MensagensPorMinutoBov&quot;);

log.info(&quot;CVM_FIX01_01.03_AjustaThroughput - 01 : &quot;+ vars.get(&quot;MensagensPorMinuto&quot;))

Long threads = 1;
if(props.get(&quot;numberOfThreads&quot;) != null){
	threads = Long.valueOf(props.get(&quot;numberOfThreads&quot;));
}

Long sleepTimeThroughputInMillis = Long.valueOf(vars.get(&quot;sleepTimeThroughputInMillis&quot;));

Long TPM = Long.valueOf(MensagensPorMinuto) / threads;
//Long TPM = Long.valueOf(MensagensPorMinuto) / Long.valueOf(1);
//Long TPMBov = (Long.valueOf(MensagensPorMinutoBov) * 3) / Long.valueOf(props.get(&quot;numberOfThreads&quot;));

MensagensPorMinuto = String.valueOf(TPM);
//MensagensPorMinutoBov = String.valueOf(TPMBov);


log.info(&quot;CVM_FIX01_01.03_AjustaThroughput - 02 : &quot;+ vars.get(&quot;MensagensPorMinuto&quot;))

props.setProperty(&quot;MensagensPorMinuto&quot;, MensagensPorMinuto);
//props.setProperty(&quot;MensagensPorMinutoBov&quot;, MensagensPorMinutoBov);

log.info(&quot;2 - setando throughput para: &quot; + MensagensPorMinuto + &quot;(simulando minuto, deveria ser &quot; + Long.valueOf(MensagensPorMinuto) / 60 + &quot; por segundo...) - sleeping &quot; + sleepTimeThroughputInMillis + &quot; millis...&quot; );
//log.info(&quot;Volume de Bovespa por minuto: &quot;+ MensagensPorMinutoBov);

Thread.sleep(sleepTimeThroughputInMillis);


</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
          <stringProp name="IfController.condition">${__groovy(&quot;0&quot;.equals(vars.get(&quot;sleepTimeThroughputInMillis&quot;)))}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="EsperaMudancaEstagio" enabled="true">
            <intProp name="ActionProcessor.action">0</intProp>
            <intProp name="ActionProcessor.target">2</intProp>
            <stringProp name="ActionProcessor.duration">${sleepTimeThroughputInMillis}</stringProp>
          </TestAction>
          <hashTree/>
        </hashTree>
      </hashTree>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">180</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import br.com.primeup.java.fixmeter.fix.ControllerSingleton;
Thread.sleep(180);
ControllerSingleton.getController();
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="CVM_FIX01_02" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(numberOfThreads,1)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1450810960000</longProp>
        <longProp name="ThreadGroup.end_time">1450810960000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">15</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV - Dados" enabled="false">
          <stringProp name="filename">C:/Eron/Projetos/Safra/CVM35/Fix/throughputBMF.csv</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames"></stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">;</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.group</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <stringProp name="throughput">${__P(MensagensPorMinuto)}</stringProp>
          <intProp name="calcMode">0</intProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="CVM_FIX01_02 - NegociosCapturados" enabled="true">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>100.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="CVM_FIX01_02.01_35=8(New)" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">// Gera um valor aleatório entre 200 e 500 milissegundos
long randomSleepTime = 200 + (Math.random() * (500 - 200));

// Log para ver o tempo gerado
log.info(&quot;Esperando por &quot; + randomSleepTime + &quot; milissegundos...&quot;);

// Pausa a execução por esse tempo
Thread.sleep(randomSleepTime);

log.info(&quot;CVM_FIX01_02.01_35=8(New)&quot;)</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="CVM_FIX01_02.02_35=8(Filled)" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">// Gera um valor aleatório entre 200 e 500 milissegundos
long randomSleepTime = 200 + (Math.random() * (500 - 200));

// Log para ver o tempo gerado
log.info(&quot;Esperando por &quot; + randomSleepTime + &quot; milissegundos...&quot;);

// Pausa a execução por esse tempo
Thread.sleep(randomSleepTime);

log.info(&quot;CVM_FIX01_02.02_35=8(Filled)&quot;)</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="CVM_FIX01_02.03_35=8(Cancel)" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">// Gera um valor aleatório entre 200 e 500 milissegundos
long randomSleepTime = 200 + (Math.random() * (500 - 200));

// Log para ver o tempo gerado
log.info(&quot;Esperando por &quot; + randomSleepTime + &quot; milissegundos...&quot;);

// Pausa a execução por esse tempo
Thread.sleep(randomSleepTime);

log.info(&quot;CVM_FIX01_02.03_35=8(Cancel)&quot;)</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="CVM_FIX01_02.04_bvmf012" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">// Gera um valor aleatório entre 200 e 500 milissegundos
long randomSleepTime = 200 + (Math.random() * (500 - 200));

// Log para ver o tempo gerado
log.info(&quot;Esperando por &quot; + randomSleepTime + &quot; milissegundos...&quot;);

// Pausa a execução por esse tempo
Thread.sleep(randomSleepTime);

log.info(&quot;CVM_FIX01_02.04_bvmf012&quot;)</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="CVM_FIX01_02 - NegociosAlocados" enabled="false">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>100.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="CVM_FIX01_02.05_bvmf014" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">// Gera um valor aleatório entre 200 e 500 milissegundos
long randomSleepTime = 200 + (Math.random() * (500 - 200));

// Log para ver o tempo gerado
log.info(&quot;Esperando por &quot; + randomSleepTime + &quot; milissegundos...&quot;);

// Pausa a execução por esse tempo
Thread.sleep(randomSleepTime);

log.info(&quot;CVM_FIX01_02.05_bvmf014&quot;)</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="CVM_FIX01_02 - ContratacaoEmprestimos" enabled="false">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>100.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="CVM_FIX01_02.06_bvmf193" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">// Gera um valor aleatório entre 200 e 500 milissegundos
long randomSleepTime = 200 + (Math.random() * (500 - 200));

// Log para ver o tempo gerado
log.info(&quot;Esperando por &quot; + randomSleepTime + &quot; milissegundos...&quot;);

// Pausa a execução por esse tempo
Thread.sleep(randomSleepTime);

log.info(&quot;CVM_FIX01_02.06_bvmf193&quot;)</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="CVM_FIX01_02 - LiquidacaoEmprestimos" enabled="false">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>100.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="CVM_FIX01_02.07_bvmf192" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">// Gera um valor aleatório entre 200 e 500 milissegundos
long randomSleepTime = 200 + (Math.random() * (500 - 200));

// Log para ver o tempo gerado
log.info(&quot;Esperando por &quot; + randomSleepTime + &quot; milissegundos...&quot;);

// Pausa a execução por esse tempo
Thread.sleep(randomSleepTime);

log.info(&quot;CVM_FIX01_02.07_bvmf192&quot;)</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="testa alterador de vazao" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="true">
          <stringProp name="throughput">${__P(MensagensPorMinuto)}</stringProp>
          <intProp name="calcMode">0</intProp>
        </ConstantThroughputTimer>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">log.info(&quot;setando vazao inicial para teste : &quot;+ vars.get(&quot;MensagensPorMinuto&quot;))</stringProp>
        </JSR223Sampler>
        <hashTree>
          <ConstantThroughputTimer guiclass="TestBeanGUI" testclass="ConstantThroughputTimer" testname="Constant Throughput Timer" enabled="false">
            <intProp name="calcMode">2</intProp>
            <stringProp name="throughput">${__P(MensagensPorMinuto,120.0)}</stringProp>
          </ConstantThroughputTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Thread Group" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${__P(tearDownLoopCount,1)}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1463432939000</longProp>
        <longProp name="ThreadGroup.end_time">1463432939000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </PostThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">Long sleepTime = Long.valueOf(props.get(&quot;tearDownSleepTime&quot;, &quot;5000&quot;));

log.info(&quot;sleeping &quot; + sleepTime + &quot; millis... (tearDown Thread Group)&quot;);

Thread.sleep(sleepTime);
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">C:\Eron\Projetos\Safra\CVM35\Fix\result_${__time(yyyyMMddHHmmss,)}.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>true</encoding>
            <assertions>false</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <fileName>true</fileName>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">C:\Eron\Projetos\Safra\CVM35\Fix\brad${__time(yyyyMMddHHmmss,)}.jtl</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer erro" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>true</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>true</responseHeaders>
            <requestHeaders>true</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <fileName>true</fileName>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">C:\Eron\Projetos\Safra\CVM35\Fix\braderros${__time(yyyyMMddHHmmss,)}.xml</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
